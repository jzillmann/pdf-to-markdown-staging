/* src/debug/FontIndex.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { clickOutside } from "../actions/clickOutside.js";
import slideH from "../svelte/slideH.js";
import FontEntry from "./FontEntry.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (9:4) {#if showFonts}
function create_if_block(ctx) {
	let div1;
	let div0;
	let div0_transition;
	let current;
	let each_value = [.../*fontMap*/ ctx[1].keys()];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", " overflow-y-scroll ");
			set_style(div0, "max-height", "65vh");
			attr(div1, "class", "py-2 px-2 bg-gray-200 rounded-br");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*fontMap*/ 2) {
				each_value = [.../*fontMap*/ ctx[1].keys()];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			add_render_callback(() => {
				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, slideH, { duration: 400 }, true);
				div0_transition.run(1);
			});

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, slideH, { duration: 400 }, false);
			div0_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			if (detaching && div0_transition) div0_transition.end();
		}
	};
}

// (12:16) {#each [...fontMap.keys()] as fontName}
function create_each_block(ctx) {
	let fontentry;
	let current;

	fontentry = new FontEntry({
			props: {
				fontMap: /*fontMap*/ ctx[1],
				fontName: /*fontName*/ ctx[4]
			}
		});

	return {
		c() {
			create_component(fontentry.$$.fragment);
		},
		m(target, anchor) {
			mount_component(fontentry, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const fontentry_changes = {};
			if (dirty & /*fontMap*/ 2) fontentry_changes.fontMap = /*fontMap*/ ctx[1];
			if (dirty & /*fontMap*/ 2) fontentry_changes.fontName = /*fontName*/ ctx[4];
			fontentry.$set(fontentry_changes);
		},
		i(local) {
			if (current) return;
			transition_in(fontentry.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(fontentry.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(fontentry, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let t0;
	let div0;
	let t1_value = (/*showFonts*/ ctx[0] ? "X" : "F") + "";
	let t1;
	let div0_class_value;
	let clickOutside_action;
	let current;
	let mounted;
	let dispose;
	let if_block = /*showFonts*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div0 = element("div");
			t1 = text(t1_value);
			attr(div0, "class", div0_class_value = " px-1.5 py-0.5 bg-gray-200 text-lg font-mono font-bold rounded-r " + (/*showFonts*/ ctx[0] ? "" : "shadow") + " cursor-pointer hover:text-select");
			set_style(div0, "font-family", "AmericanTypewriter, verdana");
			attr(div1, "class", "flex items-start");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			if (if_block) if_block.m(div1, null);
			append(div1, t0);
			append(div1, div0);
			append(div0, t1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*click_handler*/ ctx[2]),
					action_destroyer(clickOutside_action = clickOutside.call(null, div1, {
						enabled: /*showFonts*/ ctx[0],
						cb: /*clickOutside_function*/ ctx[3]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*showFonts*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showFonts*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if ((!current || dirty & /*showFonts*/ 1) && t1_value !== (t1_value = (/*showFonts*/ ctx[0] ? "X" : "F") + "")) set_data(t1, t1_value);

			if (!current || dirty & /*showFonts*/ 1 && div0_class_value !== (div0_class_value = " px-1.5 py-0.5 bg-gray-200 text-lg font-mono font-bold rounded-r " + (/*showFonts*/ ctx[0] ? "" : "shadow") + " cursor-pointer hover:text-select")) {
				attr(div0, "class", div0_class_value);
			}

			if (clickOutside_action && is_function(clickOutside_action.update) && dirty & /*showFonts*/ 1) clickOutside_action.update.call(null, {
				enabled: /*showFonts*/ ctx[0],
				cb: /*clickOutside_function*/ ctx[3]
			});
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { showFonts = false } = $$props;
	let { fontMap } = $$props;
	const click_handler = () => $$invalidate(0, showFonts = !showFonts);
	const clickOutside_function = () => $$invalidate(0, showFonts = false);

	$$self.$$set = $$props => {
		if ("showFonts" in $$props) $$invalidate(0, showFonts = $$props.showFonts);
		if ("fontMap" in $$props) $$invalidate(1, fontMap = $$props.fontMap);
	};

	return [showFonts, fontMap, click_handler, clickOutside_function];
}

class FontIndex extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { showFonts: 0, fontMap: 1 });
	}
}

export default FontIndex;