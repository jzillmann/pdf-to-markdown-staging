import './TransformerSelectionPopup.svelte.css.proxy.js';
/* src/debug/TransformerSelectionPopup.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	create_bidirectional_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class
} from "../../_snowpack/pkg/svelte/internal.js";

import { slide } from "../../_snowpack/pkg/svelte/transition.js";
import { getContext } from "../../_snowpack/pkg/svelte.js";
import { createEventDispatcher } from "../../_snowpack/pkg/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (18:8) {#each stageNames as stageName, idx}
function create_each_block(ctx) {
	let div;
	let t0_value = /*stageName*/ ctx[7] + "";
	let t0;
	let t1;
	let div_data_text_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[4](/*idx*/ ctx[9]);
	}

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr(div, "class", "tooltip px-2 svelte-1y8lpb1");
			attr(div, "data-text", div_data_text_value = /*stageDescriptions*/ ctx[1][/*idx*/ ctx[9]]);
			toggle_class(div, "selected", /*idx*/ ctx[9] == /*currentStage*/ ctx[2]);
			toggle_class(div, "selectable", /*idx*/ ctx[9] != /*currentStage*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*stageNames*/ 1 && t0_value !== (t0_value = /*stageName*/ ctx[7] + "")) set_data(t0, t0_value);

			if (dirty & /*stageDescriptions*/ 2 && div_data_text_value !== (div_data_text_value = /*stageDescriptions*/ ctx[1][/*idx*/ ctx[9]])) {
				attr(div, "data-text", div_data_text_value);
			}

			if (dirty & /*currentStage*/ 4) {
				toggle_class(div, "selected", /*idx*/ ctx[9] == /*currentStage*/ ctx[2]);
			}

			if (dirty & /*currentStage*/ 4) {
				toggle_class(div, "selectable", /*idx*/ ctx[9] != /*currentStage*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let div1_transition;
	let current;
	let each_value = /*stageNames*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "p-2 bg-gray-200 shadow-lg rounded-sm overflow-auto max-h-96");
			attr(div1, "class", "absolute -mt-6 ");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*stageDescriptions, currentStage, selectTransformer, stageNames*/ 15) {
				each_value = /*stageNames*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			if (detaching && div1_transition) div1_transition.end();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { stageNames } = $$props;
	let { stageDescriptions } = $$props;
	let { currentStage } = $$props;
	const popupOpened = getContext("popupOpened");
	const dispatch = createEventDispatcher();

	function selectTransformer(index) {
		popupOpened.set(false);
		dispatch("selectTransformer", index);
	}

	const click_handler = idx => selectTransformer(idx);

	$$self.$$set = $$props => {
		if ("stageNames" in $$props) $$invalidate(0, stageNames = $$props.stageNames);
		if ("stageDescriptions" in $$props) $$invalidate(1, stageDescriptions = $$props.stageDescriptions);
		if ("currentStage" in $$props) $$invalidate(2, currentStage = $$props.currentStage);
	};

	return [stageNames, stageDescriptions, currentStage, selectTransformer, click_handler];
}

class TransformerSelectionPopup extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			stageNames: 0,
			stageDescriptions: 1,
			currentStage: 2
		});
	}
}

export default TransformerSelectionPopup;