/* src/debug/PageSelectionPopup.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	safe_not_equal,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { slide } from "../../_snowpack/pkg/svelte/transition.js";
import { getContext } from "../../_snowpack/pkg/svelte.js";
import { createEventDispatcher } from "../../_snowpack/pkg/svelte.js";
import { Collection } from "../../_snowpack/pkg/svelte-hero-icons.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	child_ctx[10] = i;
	return child_ctx;
}

// (26:8) {#each new Array(maxPage + 1) as _, idx}
function create_each_block(ctx) {
	let div;
	let t0;
	let t1;
	let div_class_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[5](/*idx*/ ctx[10]);
	}

	return {
		c() {
			div = element("div");
			t0 = text(/*idx*/ ctx[10]);
			t1 = space();

			attr(div, "class", div_class_value = "px-2 border border-gray-300 rounded-full text-center " + (/*pagesNumbers*/ ctx[0].has(/*idx*/ ctx[10])
			? /*pinnedPage*/ ctx[2] === /*idx*/ ctx[10]
				? "bg-select"
				: "hover:text-select hover:border-select cursor-pointer"
			: "opacity-50"));
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*pagesNumbers, pinnedPage*/ 5 && div_class_value !== (div_class_value = "px-2 border border-gray-300 rounded-full text-center " + (/*pagesNumbers*/ ctx[0].has(/*idx*/ ctx[10])
			? /*pinnedPage*/ ctx[2] === /*idx*/ ctx[10]
				? "bg-select"
				: "hover:text-select hover:border-select cursor-pointer"
			: "opacity-50"))) {
				attr(div, "class", div_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let span;
	let collection;
	let t;
	let div0;
	let div1_transition;
	let current;
	let mounted;
	let dispose;

	collection = new Collection({
			props: {
				size: "1x",
				class: !!/*pinnedPage*/ ctx[2]
				? "hover:text-select cursor-pointer"
				: "opacity-50"
			}
		});

	let each_value = new Array(/*maxPage*/ ctx[1] + 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			span = element("span");
			create_component(collection.$$.fragment);
			t = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "mt-1 pr-2");
			attr(div0, "class", "grid gap-3");
			set_style(div0, "grid-template-columns", "repeat(" + Math.min(20, /*maxPage*/ ctx[1] + 1) + ", minmax(0, 1fr))");
			attr(div1, "class", "absolute mt-2 p-2 flex bg-gray-200 shadow-lg rounded-sm overflow-auto max-h-96");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, span);
			mount_component(collection, span, null);
			append(div1, t);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(span, "click", function () {
					if (is_function(!!/*pinnedPage*/ ctx[2] && /*unpinPage*/ ctx[4])) (!!/*pinnedPage*/ ctx[2] && /*unpinPage*/ ctx[4]).apply(this, arguments);
				});

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			const collection_changes = {};

			if (dirty & /*pinnedPage*/ 4) collection_changes.class = !!/*pinnedPage*/ ctx[2]
			? "hover:text-select cursor-pointer"
			: "opacity-50";

			collection.$set(collection_changes);

			if (dirty & /*pagesNumbers, pinnedPage, pinPage, maxPage*/ 15) {
				each_value = new Array(/*maxPage*/ ctx[1] + 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*maxPage*/ 2) {
				set_style(div0, "grid-template-columns", "repeat(" + Math.min(20, /*maxPage*/ ctx[1] + 1) + ", minmax(0, 1fr))");
			}
		},
		i(local) {
			if (current) return;
			transition_in(collection.$$.fragment, local);

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(collection.$$.fragment, local);
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, slide, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(collection);
			destroy_each(each_blocks, detaching);
			if (detaching && div1_transition) div1_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let { pagesNumbers } = $$props;
	let { maxPage } = $$props;
	let { pinnedPage } = $$props;
	const popupOpened = getContext("popupOpened");
	const dispatch = createEventDispatcher();

	function pinPage(index) {
		popupOpened.set(false);
		dispatch("pinPage", index);
	}

	function unpinPage() {
		popupOpened.set(false);
		dispatch("unpinPage");
	}

	const click_handler = idx => pagesNumbers.has(idx) && pinPage(idx);

	$$self.$$set = $$props => {
		if ("pagesNumbers" in $$props) $$invalidate(0, pagesNumbers = $$props.pagesNumbers);
		if ("maxPage" in $$props) $$invalidate(1, maxPage = $$props.maxPage);
		if ("pinnedPage" in $$props) $$invalidate(2, pinnedPage = $$props.pinnedPage);
	};

	return [pagesNumbers, maxPage, pinnedPage, pinPage, unpinPage, click_handler];
}

class PageSelectionPopup extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			pagesNumbers: 0,
			maxPage: 1,
			pinnedPage: 2
		});
	}
}

export default PageSelectionPopup;