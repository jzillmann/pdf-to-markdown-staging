/* src/debug/ChangeSymbol.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	get_spread_object,
	get_spread_update,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import {
	Addition,
	ContentChange,
	PositionChange,
	Direction
} from "../../core/debug/ChangeIndex.js";

import ComponentDefinition from "../components/ComponentDefinition.js";

import {
	PlusCircle as Plus,
	Adjustments as Changed,
	ArrowCircleUp as Up,
	ArrowCircleDown as Down
} from "../../_snowpack/pkg/svelte-hero-icons.js";

function create_if_block(ctx) {
	let div;
	let t;
	let current;
	let if_block0 = /*iconComp*/ ctx[2] && create_if_block_2(ctx);
	let if_block1 = /*changeContent*/ ctx[1] && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			attr(div, "class", "flex space-x-0.5 items-center text-xs");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*iconComp*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*iconComp*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*changeContent*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (39:8) {#if iconComp}
function create_if_block_2(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*iconComp*/ ctx[2].args];
	var switch_value = /*iconComp*/ ctx[2].component;

	function switch_props(ctx) {
		let switch_instance_props = {};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*iconComp*/ 4)
			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*iconComp*/ ctx[2].args)])
			: {};

			if (switch_value !== (switch_value = /*iconComp*/ ctx[2].component)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (42:8) {#if changeContent}
function create_if_block_1(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text(/*changeContent*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*changeContent*/ 2) set_data(t, /*changeContent*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*hasChanged*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*hasChanged*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*hasChanged*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let hasChanged;
	
	
	let { changes } = $$props;
	let { item } = $$props;
	let changeContent;
	let iconComp;

	$$self.$$set = $$props => {
		if ("changes" in $$props) $$invalidate(3, changes = $$props.changes);
		if ("item" in $$props) $$invalidate(4, item = $$props.item);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*changes, item*/ 24) {
			$: $$invalidate(0, hasChanged = changes.hasChanged(item));
		}

		if ($$self.$$.dirty & /*hasChanged, changes, item*/ 25) {
			$: {
				if (hasChanged) {
					let args = { size: "14" };
					let change = changes.change(item);

					switch (change.constructor.name) {
						case PositionChange.name:
							const positionChange = change;
							$$invalidate(1, changeContent = `${positionChange.amount}`);
							$$invalidate(2, iconComp = positionChange.direction === Direction.UP
							? new ComponentDefinition(Up, args)
							: new ComponentDefinition(Down, args));
							break;
						case Addition.name:
							$$invalidate(2, iconComp = new ComponentDefinition(Plus, args));
							break;
						case ContentChange.name:
							$$invalidate(2, iconComp = new ComponentDefinition(Changed, args));
							break;
						default:
							throw new Error(`${change.constructor.name}: ${change}`);
					}
				}
			}
		}
	};

	return [hasChanged, changeContent, iconComp, changes, item];
}

class ChangeSymbol extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { changes: 3, item: 4 });
	}
}

export default ChangeSymbol;