import './FontEntry.svelte.css.proxy.js';
/* src/debug/FontEntry.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { slide } from "../../_snowpack/pkg/svelte/transition.js";

function create_if_block(ctx) {
	let div20;
	let div0;
	let t1;
	let div1;
	let t2_value = /*font*/ ctx[2]["type"] + "";
	let t2;
	let t3;
	let div2;
	let t5;
	let div3;
	let t6_value = /*font*/ ctx[2]["mimetype"] + "";
	let t6;
	let t7;
	let div4;
	let t9;
	let div5;
	let t10_value = /*font*/ ctx[2]["ascent"].toFixed(2) + "";
	let t10;
	let t11;
	let div6;
	let t13;
	let div7;
	let t14_value = /*font*/ ctx[2]["descent"].toFixed(2) + "";
	let t14;
	let t15;
	let div8;
	let t17;
	let div9;
	let t18_value = /*font*/ ctx[2]["bbox"].join(", ") + "";
	let t18;
	let t19;
	let div10;
	let t21;
	let div11;
	let t22_value = /*font*/ ctx[2]["fontMatrix"].join(", ") + "";
	let t22;
	let t23;
	let div12;
	let t25;
	let div13;
	let t26_value = /*font*/ ctx[2]["vertical"] + "";
	let t26;
	let t27;
	let div14;
	let t29;
	let div15;
	let t30_value = /*font*/ ctx[2]["isMonospace"] + "";
	let t30;
	let t31;
	let div16;
	let t33;
	let div17;
	let t34_value = /*font*/ ctx[2]["isSerifFont"] + "";
	let t34;
	let t35;
	let div18;
	let t37;
	let div19;
	let t38_value = /*font*/ ctx[2]["isType3Font"] + "";
	let t38;
	let div20_transition;
	let current;

	return {
		c() {
			div20 = element("div");
			div0 = element("div");
			div0.textContent = "Type:";
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			div2.textContent = "MimeType:";
			t5 = space();
			div3 = element("div");
			t6 = text(t6_value);
			t7 = space();
			div4 = element("div");
			div4.textContent = "Ascent:";
			t9 = space();
			div5 = element("div");
			t10 = text(t10_value);
			t11 = space();
			div6 = element("div");
			div6.textContent = "Descent:";
			t13 = space();
			div7 = element("div");
			t14 = text(t14_value);
			t15 = space();
			div8 = element("div");
			div8.textContent = "BBox:";
			t17 = space();
			div9 = element("div");
			t18 = text(t18_value);
			t19 = space();
			div10 = element("div");
			div10.textContent = "Matrix:";
			t21 = space();
			div11 = element("div");
			t22 = text(t22_value);
			t23 = space();
			div12 = element("div");
			div12.textContent = "Vertical:";
			t25 = space();
			div13 = element("div");
			t26 = text(t26_value);
			t27 = space();
			div14 = element("div");
			div14.textContent = "Monospace:";
			t29 = space();
			div15 = element("div");
			t30 = text(t30_value);
			t31 = space();
			div16 = element("div");
			div16.textContent = "Setif:";
			t33 = space();
			div17 = element("div");
			t34 = text(t34_value);
			t35 = space();
			div18 = element("div");
			div18.textContent = "Type3:";
			t37 = space();
			div19 = element("div");
			t38 = text(t38_value);
			attr(div20, "class", "twoColumned px-2 text-sm svelte-1gv679s");
		},
		m(target, anchor) {
			insert(target, div20, anchor);
			append(div20, div0);
			append(div20, t1);
			append(div20, div1);
			append(div1, t2);
			append(div20, t3);
			append(div20, div2);
			append(div20, t5);
			append(div20, div3);
			append(div3, t6);
			append(div20, t7);
			append(div20, div4);
			append(div20, t9);
			append(div20, div5);
			append(div5, t10);
			append(div20, t11);
			append(div20, div6);
			append(div20, t13);
			append(div20, div7);
			append(div7, t14);
			append(div20, t15);
			append(div20, div8);
			append(div20, t17);
			append(div20, div9);
			append(div9, t18);
			append(div20, t19);
			append(div20, div10);
			append(div20, t21);
			append(div20, div11);
			append(div11, t22);
			append(div20, t23);
			append(div20, div12);
			append(div20, t25);
			append(div20, div13);
			append(div13, t26);
			append(div20, t27);
			append(div20, div14);
			append(div20, t29);
			append(div20, div15);
			append(div15, t30);
			append(div20, t31);
			append(div20, div16);
			append(div20, t33);
			append(div20, div17);
			append(div17, t34);
			append(div20, t35);
			append(div20, div18);
			append(div20, t37);
			append(div20, div19);
			append(div19, t38);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*font*/ 4) && t2_value !== (t2_value = /*font*/ ctx[2]["type"] + "")) set_data(t2, t2_value);
			if ((!current || dirty & /*font*/ 4) && t6_value !== (t6_value = /*font*/ ctx[2]["mimetype"] + "")) set_data(t6, t6_value);
			if ((!current || dirty & /*font*/ 4) && t10_value !== (t10_value = /*font*/ ctx[2]["ascent"].toFixed(2) + "")) set_data(t10, t10_value);
			if ((!current || dirty & /*font*/ 4) && t14_value !== (t14_value = /*font*/ ctx[2]["descent"].toFixed(2) + "")) set_data(t14, t14_value);
			if ((!current || dirty & /*font*/ 4) && t18_value !== (t18_value = /*font*/ ctx[2]["bbox"].join(", ") + "")) set_data(t18, t18_value);
			if ((!current || dirty & /*font*/ 4) && t22_value !== (t22_value = /*font*/ ctx[2]["fontMatrix"].join(", ") + "")) set_data(t22, t22_value);
			if ((!current || dirty & /*font*/ 4) && t26_value !== (t26_value = /*font*/ ctx[2]["vertical"] + "")) set_data(t26, t26_value);
			if ((!current || dirty & /*font*/ 4) && t30_value !== (t30_value = /*font*/ ctx[2]["isMonospace"] + "")) set_data(t30, t30_value);
			if ((!current || dirty & /*font*/ 4) && t34_value !== (t34_value = /*font*/ ctx[2]["isSerifFont"] + "")) set_data(t34, t34_value);
			if ((!current || dirty & /*font*/ 4) && t38_value !== (t38_value = /*font*/ ctx[2]["isType3Font"] + "")) set_data(t38, t38_value);
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div20_transition) div20_transition = create_bidirectional_transition(div20, slide, {}, true);
				div20_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div20_transition) div20_transition = create_bidirectional_transition(div20, slide, {}, false);
			div20_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div20);
			if (detaching && div20_transition) div20_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let t0;
	let t1;
	let div1;
	let t2_value = /*font*/ ctx[2]["name"] + "";
	let t2;
	let t3;
	let current;
	let mounted;
	let dispose;
	let if_block = !/*collapsed*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = text(/*fontName*/ ctx[0]);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			if (if_block) if_block.c();
			attr(div0, "class", "font-semibold");
			attr(div1, "class", "");
			attr(div2, "class", "twoColumned header bg-gray-400 py-1 px-2 rounded-t cursor-pointer svelte-1gv679s");
			toggle_class(div2, "opened", !/*collapsed*/ ctx[1]);
			attr(div3, "class", "pb-1 rounded shadow bg-gray-300 min-w-max");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, div1);
			append(div1, t2);
			append(div3, t3);
			if (if_block) if_block.m(div3, null);
			current = true;

			if (!mounted) {
				dispose = listen(div2, "click", /*click_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*fontName*/ 1) set_data(t0, /*fontName*/ ctx[0]);
			if ((!current || dirty & /*font*/ 4) && t2_value !== (t2_value = /*font*/ ctx[2]["name"] + "")) set_data(t2, t2_value);

			if (dirty & /*collapsed*/ 2) {
				toggle_class(div2, "opened", !/*collapsed*/ ctx[1]);
			}

			if (!/*collapsed*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*collapsed*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div3, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let font;
	let { fontName } = $$props;
	let { fontMap } = $$props;
	let collapsed = true;
	const click_handler = () => $$invalidate(1, collapsed = !collapsed);

	$$self.$$set = $$props => {
		if ("fontName" in $$props) $$invalidate(0, fontName = $$props.fontName);
		if ("fontMap" in $$props) $$invalidate(3, fontMap = $$props.fontMap);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*fontMap, fontName*/ 9) {
			$: $$invalidate(2, font = fontMap.get(fontName));
		}
	};

	return [fontName, collapsed, font, fontMap, click_handler];
}

class FontEntry extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { fontName: 0, fontMap: 3 });
	}
}

export default FontEntry;