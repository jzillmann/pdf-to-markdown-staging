import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import Upload from "./main/Upload.svelte.js";
import { blur } from "../_snowpack/pkg/svelte/transition.js";
import { parseResult, debug } from "./store.js";
import DebugView from "./debug/DebugView.svelte.js";

function create_else_block(ctx) {
	let span;
	let upload;
	let span_intro;
	let span_outro;
	let current;
	upload = new Upload({});

	return {
		c() {
			span = element("span");
			create_component(upload.$$.fragment);
			attr(span, "class", "svelte-1nmagxi");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			mount_component(upload, span, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(upload.$$.fragment, local);

			add_render_callback(() => {
				if (span_outro) span_outro.end(1);
				if (!span_intro) span_intro = create_in_transition(span, blur, { duration: 900 });
				span_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(upload.$$.fragment, local);
			if (span_intro) span_intro.invalidate();
			span_outro = create_out_transition(span, blur, { duration: 900 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(upload);
			if (detaching && span_outro) span_outro.end();
		}
	};
}

// (12:8) {#if $debug}
function create_if_block(ctx) {
	let span;
	let debugview;
	let span_intro;
	let span_outro;
	let current;
	debugview = new DebugView({ props: { debug: /*$debug*/ ctx[0] } });

	return {
		c() {
			span = element("span");
			create_component(debugview.$$.fragment);
			attr(span, "class", "svelte-1nmagxi");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			mount_component(debugview, span, null);
			current = true;
		},
		p(ctx, dirty) {
			const debugview_changes = {};
			if (dirty & /*$debug*/ 1) debugview_changes.debug = /*$debug*/ ctx[0];
			debugview.$set(debugview_changes);
		},
		i(local) {
			if (current) return;
			transition_in(debugview.$$.fragment, local);

			add_render_callback(() => {
				if (span_outro) span_outro.end(1);
				if (!span_intro) span_intro = create_in_transition(span, blur, { duration: 1200 });
				span_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(debugview.$$.fragment, local);
			if (span_intro) span_intro.invalidate();
			span_outro = create_out_transition(span, blur, { duration: 900 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_component(debugview);
			if (detaching && span_outro) span_outro.end();
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let div0_intro;
	let t1;
	let main;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$debug*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div0 = element("div");
			div0.textContent = "PDF to Markdown Converter";
			t1 = space();
			main = element("main");
			div1 = element("div");
			if_block.c();
			attr(div0, "class", "text-2xl font-semibold font-serif text-center bg-gray-400");
			attr(div1, "class", "transition-container svelte-1nmagxi");
			attr(main, "class", "mt-2 h-full");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t1, anchor);
			insert(target, main, anchor);
			append(main, div1);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i(local) {
			if (current) return;

			if (!div0_intro) {
				add_render_callback(() => {
					div0_intro = create_in_transition(div0, blur, { duration: 450 });
					div0_intro.start();
				});
			}

			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(main);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $debug;
	component_subscribe($$self, debug, $$value => $$invalidate(0, $debug = $$value));
	return [$debug];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;