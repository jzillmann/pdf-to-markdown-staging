/* src/components/Popup.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	check_outros,
	component_subscribe,
	create_slot,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_slot
} from "../../_snowpack/pkg/svelte/internal.js";

import { writable } from "../../_snowpack/pkg/svelte/store.js";
import { setContext } from "../../_snowpack/pkg/svelte.js";
import { clickOutside } from "../actions/clickOutside.js";
const get_content_slot_changes = dirty => ({});
const get_content_slot_context = ctx => ({});
const get_trigger_slot_changes = dirty => ({});
const get_trigger_slot_context = ctx => ({});

// (16:4) {#if $opened}
function create_if_block(ctx) {
	let span;
	let current;
	const content_slot_template = /*#slots*/ ctx[4].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[3], get_content_slot_context);

	return {
		c() {
			span = element("span");
			if (content_slot) content_slot.c();
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (content_slot) {
				content_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (content_slot) {
				if (content_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_content_slot_changes, get_content_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(content_slot, local);
			current = true;
		},
		o(local) {
			transition_out(content_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (content_slot) content_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let span1;
	let span0;
	let t;
	let clickOutside_action;
	let current;
	let mounted;
	let dispose;
	const trigger_slot_template = /*#slots*/ ctx[4].trigger;
	const trigger_slot = create_slot(trigger_slot_template, ctx, /*$$scope*/ ctx[3], get_trigger_slot_context);
	let if_block = /*$opened*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			if (trigger_slot) trigger_slot.c();
			t = space();
			if (if_block) if_block.c();
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);

			if (trigger_slot) {
				trigger_slot.m(span0, null);
			}

			append(span1, t);
			if (if_block) if_block.m(span1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(span0, "click", /*toogle*/ ctx[2]),
					action_destroyer(clickOutside_action = clickOutside.call(null, span1, {
						enabled: /*opened*/ ctx[1],
						cb: /*clickOutside_function*/ ctx[5]
					}))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (trigger_slot) {
				if (trigger_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(trigger_slot, trigger_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_trigger_slot_changes, get_trigger_slot_context);
				}
			}

			if (/*$opened*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$opened*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(span1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(trigger_slot, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(trigger_slot, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span1);
			if (trigger_slot) trigger_slot.d(detaching);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $opened;
	let { $$slots: slots = {}, $$scope } = $$props;
	let opened = writable(false);
	component_subscribe($$self, opened, value => $$invalidate(0, $opened = value));
	setContext("popupOpened", opened);

	function toogle() {
		opened.update(old => !old);
	}

	const clickOutside_function = () => opened.set(false);

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [$opened, opened, toogle, $$scope, slots, clickOutside_function];
}

class Popup extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Popup;