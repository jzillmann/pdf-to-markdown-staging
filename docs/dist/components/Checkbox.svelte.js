import './Checkbox.svelte.css.proxy.js';
/* src/components/Checkbox.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let input;
	let input_id_value;
	let t0;
	let label;
	let t1;
	let label_for_value;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(/*name*/ ctx[1]);
			attr(input, "id", input_id_value = "checkbox-" + /*name*/ ctx[1]);
			attr(input, "type", "checkbox");
			attr(input, "class", "hidden svelte-19cssp8");
			attr(label, "for", label_for_value = "checkbox-" + /*name*/ ctx[1]);
			attr(label, "class", "py-0.5 px-1 border-t-2 border-b-2 border-transparent cursor-pointer select-none whitespace-nowrap svelte-19cssp8");
		},
		m(target, anchor) {
			insert(target, input, anchor);
			input.checked = /*enabled*/ ctx[0];
			insert(target, t0, anchor);
			insert(target, label, anchor);
			append(label, t1);

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*name*/ 2 && input_id_value !== (input_id_value = "checkbox-" + /*name*/ ctx[1])) {
				attr(input, "id", input_id_value);
			}

			if (dirty & /*enabled*/ 1) {
				input.checked = /*enabled*/ ctx[0];
			}

			if (dirty & /*name*/ 2) set_data(t1, /*name*/ ctx[1]);

			if (dirty & /*name*/ 2 && label_for_value !== (label_for_value = "checkbox-" + /*name*/ ctx[1])) {
				attr(label, "for", label_for_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
			if (detaching) detach(t0);
			if (detaching) detach(label);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let { enabled = true } = $$props;

	function input_change_handler() {
		enabled = this.checked;
		$$invalidate(0, enabled);
	}

	$$self.$$set = $$props => {
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("enabled" in $$props) $$invalidate(0, enabled = $$props.enabled);
	};

	return [enabled, name, input_change_handler];
}

class Checkbox extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 1, enabled: 0 });
	}
}

export default Checkbox;