import './Upload.svelte.css.proxy.js';
/* src/main/Upload.svelte generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	add_flush_callback,
	add_render_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	component_subscribe,
	create_component,
	create_in_transition,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	handle_promise,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { blur, slide } from "../../_snowpack/pkg/svelte/transition.js";
import Dropzone from "../../_snowpack/pkg/svelte-file-dropzone.js";
import { Download, Check } from "../../_snowpack/pkg/svelte-hero-icons.js";
import { processUpload, loadExample } from "../store.js";
import ProgressRing from "../components/ProgressRing.svelte.js";
import Checkbox from "../components/Checkbox.svelte.js";
import { debugEnabled } from "../config.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

// (52:8) <Dropzone             on:drop={handleFilesSelect}             on:dragenter={() => (dragover = true)}             on:dragleave={() => (dragover = false)}             multiple={false}             noClick={false}             disableDefaultStyles={true}>
function create_default_slot(ctx) {
	let div5;
	let span;
	let download;
	let t0;
	let div4;
	let current;
	download = new Download({ props: { size: "21x" } });

	return {
		c() {
			div5 = element("div");
			span = element("span");
			create_component(download.$$.fragment);
			t0 = space();
			div4 = element("div");

			div4.innerHTML = `<div class="text-5xl font-bold my-4">Drop your PDF file here...</div> 
                    <div class="text-2xl font-bold">Or click the box to select one...</div> 
                    <div class="mt-14"><strong>Note:</strong> Your data stays locally in your browser.</div> 
                    <div class="mt-5 text-sm italic font-serif">This tool converts a PDF file into a Markdown text format! Simply drag &amp; drop your PDF file on
                        the upload area and go from there. Don&#39;t expect wonders, there are a lot of variances in
                        generated PDF&#39;s from different tools and different ages. No matter how good the parser works for
                        your PDF, you will have to invest a good amount of manuell work to complete it.</div>`;

			attr(span, "class", "svelte-bajlah");
			toggle_class(span, "dragoverItem", /*dragover*/ ctx[1]);
			attr(div4, "class", "px-5 mb-5");
			attr(div5, "class", "grid grid-cols-1 md:grid-cols-2 justify-items-center");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, span);
			mount_component(download, span, null);
			append(div5, t0);
			append(div5, div4);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*dragover*/ 2) {
				toggle_class(span, "dragoverItem", /*dragover*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(download.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(download.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			destroy_component(download);
		}
	};
}

// (81:12) {#if specifiedFileName}
function create_if_block_4(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let div_intro;

	return {
		c() {
			div = element("div");
			t0 = text("Parsing ");
			t1 = text(/*specifiedFileName*/ ctx[0]);
			t2 = text(" ...");
			attr(div, "class", "text-2xl mb-2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*specifiedFileName*/ 1) set_data(t1, /*specifiedFileName*/ ctx[0]);
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, blur, {});
					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (84:12) {#if parseProgress}
function create_if_block_1(ctx) {
	let div1;
	let progressring;
	let t;
	let div0;
	let div1_intro;
	let current;

	progressring = new ProgressRing({
			props: {
				radius: 50,
				stroke: 7,
				progress: /*parseProgress*/ ctx[4]?.totalProgress() * 100
			}
		});

	let each_value = /*parseProgress*/ ctx[4].stages;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div1 = element("div");
			create_component(progressring.$$.fragment);
			t = space();
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div1, "class", "flex space-x-4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(progressring, div1, null);
			append(div1, t);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			const progressring_changes = {};
			if (dirty & /*parseProgress*/ 16) progressring_changes.progress = /*parseProgress*/ ctx[4]?.totalProgress() * 100;
			progressring.$set(progressring_changes);

			if (dirty & /*parseProgress*/ 16) {
				each_value = /*parseProgress*/ ctx[4].stages;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(progressring.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			if (!div1_intro) {
				add_render_callback(() => {
					div1_intro = create_in_transition(div1, blur, {});
					div1_intro.start();
				});
			}

			current = true;
		},
		o(local) {
			transition_out(progressring.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(progressring);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (97:70) 
function create_if_block_3(ctx) {
	let div1;
	let div0;
	let t0;
	let t1_value = /*stage*/ ctx[13] + "";
	let t1;
	let t2;

	let t3_value = (/*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
	? /*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
	: "") + "";

	let t3;
	let t4;
	let check;
	let t5;
	let current;

	check = new Check({
			props: { size: "1.5x", class: "text-select" }
		});

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = text("Parsing\n                                        ");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			create_component(check.$$.fragment);
			t5 = space();
			attr(div1, "class", "flex space-x-2 items-center ");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, t2);
			append(div0, t3);
			append(div1, t4);
			mount_component(check, div1, null);
			append(div1, t5);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*parseProgress*/ 16) && t1_value !== (t1_value = /*stage*/ ctx[13] + "")) set_data(t1, t1_value);

			if ((!current || dirty & /*parseProgress*/ 16) && t3_value !== (t3_value = (/*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
			? /*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
			: "") + "")) set_data(t3, t3_value);
		},
		i(local) {
			if (current) return;
			transition_in(check.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(check.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(check);
		}
	};
}

// (89:28) {#if parseProgress.isProgressing(index)}
function create_if_block_2(ctx) {
	let div1;
	let div0;
	let t0;
	let t1_value = /*stage*/ ctx[13] + "";
	let t1;
	let t2;

	let t3_value = (/*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
	? /*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
	: "") + "";

	let t3;
	let t4;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			t0 = text("Parsing\n                                        ");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			attr(div1, "class", "flex space-x-2 items-center");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, t2);
			append(div0, t3);
			append(div1, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*parseProgress*/ 16 && t1_value !== (t1_value = /*stage*/ ctx[13] + "")) set_data(t1, t1_value);

			if (dirty & /*parseProgress*/ 16 && t3_value !== (t3_value = (/*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
			? /*parseProgress*/ ctx[4].stageDetails[/*index*/ ctx[15]]
			: "") + "")) set_data(t3, t3_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (88:24) {#each parseProgress.stages as stage, index}
function create_each_block(ctx) {
	let show_if;
	let show_if_1;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_2, create_if_block_3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*parseProgress*/ 16) show_if = !!/*parseProgress*/ ctx[4].isProgressing(/*index*/ ctx[15]);
		if (show_if) return 0;
		if (dirty & /*parseProgress*/ 16) show_if_1 = !!/*parseProgress*/ ctx[4].isComplete(/*index*/ ctx[15]);
		if (show_if_1) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx, -1))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

// (111:12) {#if rejectionError}
function create_if_block(ctx) {
	let div;
	let t;
	let div_intro;

	return {
		c() {
			div = element("div");
			t = text(/*rejectionError*/ ctx[3]);
			attr(div, "class", "text-red-700");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*rejectionError*/ 8) set_data(t, /*rejectionError*/ ctx[3]);
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, slide, {});
					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (116:12) {:catch error}
function create_catch_block(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3_value = /*error*/ ctx[12]?.message + "";
	let t3;

	return {
		c() {
			div = element("div");
			t0 = text("Failed to parse '");
			t1 = text(/*specifiedFileName*/ ctx[0]);
			t2 = text("': ");
			t3 = text(t3_value);
			attr(div, "class", "text-red-700");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
			append(div, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*specifiedFileName*/ 1) set_data(t1, /*specifiedFileName*/ ctx[0]);
			if (dirty & /*upload*/ 4 && t3_value !== (t3_value = /*error*/ ctx[12]?.message + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (1:0) <script>import { blur, slide }
function create_then_block(ctx) {
	return { c: noop, m: noop, p: noop, d: noop };
}

// (114:27)                  <!--  -->             {:catch error}
function create_pending_block(ctx) {
	return { c: noop, m: noop, p: noop, d: noop };
}

function create_fragment(ctx) {
	let div5;
	let div1;
	let div0;
	let t1;
	let checkbox;
	let updating_enabled;
	let t2;
	let div2;
	let dropzone;
	let t3;
	let div4;
	let div3;
	let t4;
	let t5;
	let t6;
	let promise;
	let current;
	let mounted;
	let dispose;

	function checkbox_enabled_binding(value) {
		/*checkbox_enabled_binding*/ ctx[8](value);
	}

	let checkbox_props = { name: "Debug" };

	if (/*$debugEnabled*/ ctx[5] !== void 0) {
		checkbox_props.enabled = /*$debugEnabled*/ ctx[5];
	}

	checkbox = new Checkbox({ props: checkbox_props });
	binding_callbacks.push(() => bind(checkbox, "enabled", checkbox_enabled_binding));

	dropzone = new Dropzone({
			props: {
				multiple: false,
				noClick: false,
				disableDefaultStyles: true,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	dropzone.$on("drop", /*handleFilesSelect*/ ctx[7]);
	dropzone.$on("dragenter", /*dragenter_handler*/ ctx[9]);
	dropzone.$on("dragleave", /*dragleave_handler*/ ctx[10]);
	let if_block0 = /*specifiedFileName*/ ctx[0] && create_if_block_4(ctx);
	let if_block1 = /*parseProgress*/ ctx[4] && create_if_block_1(ctx);
	let if_block2 = /*rejectionError*/ ctx[3] && create_if_block(ctx);

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: true,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		error: 12
	};

	handle_promise(promise = /*upload*/ ctx[2], info);

	return {
		c() {
			div5 = element("div");
			div1 = element("div");
			div0 = element("div");
			div0.textContent = "Load Example";
			t1 = space();
			create_component(checkbox.$$.fragment);
			t2 = space();
			div2 = element("div");
			create_component(dropzone.$$.fragment);
			t3 = space();
			div4 = element("div");
			div3 = element("div");
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			t6 = space();
			info.block.c();
			attr(div0, "class", "py-0.5 border-2 border-gray-50 hover:underline cursor-pointer");
			attr(div1, "class", "mb-0.5 flex flex-row-reverse space-x-2 space-x-reverse text-sm items-center");
			attr(div2, "class", "mb-5 border-2 border-dashed border-gray-400 hover:border-select svelte-bajlah");
			toggle_class(div2, "dragover", /*dragover*/ ctx[1]);
			set_style(div3, "min-width", "70%");
			attr(div4, "class", "mt-5 text-xl font-bold");
			attr(div5, "class", "container mx-auto");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div1);
			append(div1, div0);
			append(div1, t1);
			mount_component(checkbox, div1, null);
			append(div5, t2);
			append(div5, div2);
			mount_component(dropzone, div2, null);
			append(div5, t3);
			append(div5, div4);
			append(div4, div3);
			if (if_block0) if_block0.m(div3, null);
			append(div3, t4);
			if (if_block1) if_block1.m(div3, null);
			append(div3, t5);
			if (if_block2) if_block2.m(div3, null);
			append(div3, t6);
			info.block.m(div3, info.anchor = null);
			info.mount = () => div3;
			info.anchor = null;
			current = true;

			if (!mounted) {
				dispose = listen(div0, "click", /*handleExampleLoad*/ ctx[6]);
				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			const checkbox_changes = {};

			if (!updating_enabled && dirty & /*$debugEnabled*/ 32) {
				updating_enabled = true;
				checkbox_changes.enabled = /*$debugEnabled*/ ctx[5];
				add_flush_callback(() => updating_enabled = false);
			}

			checkbox.$set(checkbox_changes);
			const dropzone_changes = {};

			if (dirty & /*$$scope, dragover*/ 65538) {
				dropzone_changes.$$scope = { dirty, ctx };
			}

			dropzone.$set(dropzone_changes);

			if (dirty & /*dragover*/ 2) {
				toggle_class(div2, "dragover", /*dragover*/ ctx[1]);
			}

			if (/*specifiedFileName*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*specifiedFileName*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div3, t4);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*parseProgress*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*parseProgress*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div3, t5);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*rejectionError*/ ctx[3]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty & /*rejectionError*/ 8) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div3, t6);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			info.ctx = ctx;

			if (dirty & /*upload*/ 4 && promise !== (promise = /*upload*/ ctx[2]) && handle_promise(promise, info)) {
				
			} else {
				const child_ctx = ctx.slice();
				child_ctx[12] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(checkbox.$$.fragment, local);
			transition_in(dropzone.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(checkbox.$$.fragment, local);
			transition_out(dropzone.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			destroy_component(checkbox);
			destroy_component(dropzone);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			info.block.d();
			info.token = null;
			info = null;
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $debugEnabled;
	component_subscribe($$self, debugEnabled, $$value => $$invalidate(5, $debugEnabled = $$value));
	
	let specifiedFileName;
	let dragover = false;
	let upload;
	let rejectionError;
	let parseProgress;

	function handleExampleLoad() {
		$$invalidate(1, dragover = true);
		$$invalidate(0, specifiedFileName = "ExamplePdf.pdf");
		$$invalidate(3, rejectionError = undefined);
		$$invalidate(4, parseProgress = undefined);
		$$invalidate(2, upload = loadExample(handleProgress));
	}

	function handleFilesSelect(e) {
		$$invalidate(0, specifiedFileName = undefined);
		$$invalidate(3, rejectionError = undefined);
		$$invalidate(4, parseProgress = undefined);
		const { acceptedFiles, fileRejections } = e.detail;

		if (acceptedFiles.length === 1) {
			const specifiedFile = acceptedFiles[0];
			$$invalidate(0, specifiedFileName = specifiedFile.name);
			$$invalidate(2, upload = processUpload(specifiedFile, handleProgress));
		}

		if (fileRejections.length > 1) {
			const fileNames = fileRejections.map(r => r.file.name);
			$$invalidate(3, rejectionError = `Only one file at a time allowed! Rejected ${fileRejections.length} files: '${fileNames}'.`);
		}
	}

	function handleProgress(progress) {
		$$invalidate(4, parseProgress = progress);
	}

	function checkbox_enabled_binding(value) {
		$debugEnabled = value;
		debugEnabled.set($debugEnabled);
	}

	const dragenter_handler = () => $$invalidate(1, dragover = true);
	const dragleave_handler = () => $$invalidate(1, dragover = false);

	return [
		specifiedFileName,
		dragover,
		upload,
		rejectionError,
		parseProgress,
		$debugEnabled,
		handleExampleLoad,
		handleFilesSelect,
		checkbox_enabled_binding,
		dragenter_handler,
		dragleave_handler
	];
}

class Upload extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Upload;